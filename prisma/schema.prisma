generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@index([provider])
  @@index([expires_at])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expires])
}

model User {
  id               String       @id @default(cuid())
  name             String?
  email            String       @unique
  emailVerified    DateTime?
  image            String?
  password         String?
  lastName         String?
  firstName        String?
  middleName       String?
  position         String?
  idNumber         String?      @unique
  employmentDate   DateTime?
  office           Office?
  group            Group?
  department       Department?
  contactNumber    String?
  pdEmail          String?      @unique
  personalEmail    String?      @unique
  birthdate        DateTime?
  addressId        String?
  profileCompleted Boolean      @default(false)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  accounts         Account[]
  registeredIMs    IM[]
  permissions      Permission[]
  sessions         Session[]
  address          Address?     @relation(fields: [addressId], references: [id])

  @@index([office])
  @@index([group])
  @@index([department])
  @@index([profileCompleted])
  @@index([createdAt])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Address {
  id               String   @id @default(cuid())
  houseNo          String
  street           String
  subdivision      String?
  region           String
  province         String?
  cityMunicipality String
  barangay         String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  users            User[]
}

model Permission {
  id               String           @id @default(cuid())
  userId           String
  module           String
  modulePermission ModulePermission
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, module])
  @@index([module])
  @@index([modulePermission])
}

model IM {
  id                 String    @id @default(cuid())
  imNumber           String    @unique
  lastName           String
  firstName          String
  middleName         String
  birthday           DateTime
  contactNo          String
  email              String
  houseNo            String?
  street             String?
  subdivision        String?
  region             String?
  province           String?
  cityMunicipality   String?
  barangay           String?
  ownGcash           String?
  authorizedGcash    String?
  authorizedReceiver String?
  fbLink             String?
  imFilesLink        String?
  status             IMStatus? @default(ACTIVE)
  registeredBy       String?
  createdAt          DateTime? @default(now())
  updatedAt          DateTime? @updatedAt
  registeredByUser   User?     @relation(fields: [registeredBy], references: [id])

  @@index([imNumber])
  @@index([status])
  @@index([registeredBy])
  @@index([createdAt])
}

enum Office {
  PROJECT_DUO_GENERAL_ADMINISTRATION
  PROJECT_DUO_GENERAL_OPERATIONS
}

enum Group {
  ASG
  AFG
  SOG
  CG
}

enum Department {
  ASSETS_AND_PROPERTY_MANAGEMENT
  PEOPLE_MANAGEMENT
  ACCOUNTS_PAYABLE
  ACCOUNTS_RECEIVABLE
  TREASURY
  BUSINESS_UNIT_1
  BUSINESS_UNIT_2
  BUSINESS_DEVELOPMENT
  DESIGN_AND_MULTIMEDIA
  COPY_AND_DIGITAL
}

enum ModulePermission {
  REQUESTOR
  APPROVER
}

enum IMStatus {
  ACTIVE
  INACTIVE
}
