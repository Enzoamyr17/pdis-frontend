generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@index([provider])
  @@index([expires_at])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expires])
}

model User {
  id               String       @id @default(cuid())
  name             String?
  email            String       @unique
  emailVerified    DateTime?
  image            String?
  password         String?
  lastName         String?
  firstName        String?
  middleName       String?
  position         String?
  idNumber         String?      @unique
  employmentDate   DateTime?
  office           Office?
  group            Group?
  department       Department?
  contactNumber    String?
  pdEmail          String?      @unique
  personalEmail    String?      @unique
  birthdate        DateTime?
  addressId        String?
  profileCompleted Boolean      @default(false)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  accounts         Account[]
  registeredIMs    IM[]
  permissions      Permission[]
  sessions         Session[]
  address          Address?     @relation(fields: [addressId], references: [id])
  managedProjects  Project[]    @relation("ProjectAccountManager")
  projectManager   Project[]    @relation("ProjectManager")
  imcfForms        IMCFForm[]

  @@index([office])
  @@index([group])
  @@index([department])
  @@index([profileCompleted])
  @@index([createdAt])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Address {
  id               String   @id @default(cuid())
  houseNo          String
  street           String
  subdivision      String?
  region           String
  province         String?
  cityMunicipality String
  barangay         String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  users            User[]
}

model Permission {
  id               String           @id @default(cuid())
  userId           String
  module           String
  modulePermission ModulePermission
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, module])
  @@index([module])
  @@index([modulePermission])
}

model IM {
  id                 String    @id @default(cuid())
  imNumber           String    @unique
  lastName           String
  firstName          String
  middleName         String
  birthday           DateTime
  contactNo          String
  email              String
  houseNo            String?
  street             String?
  subdivision        String?
  region             String?
  province           String?
  cityMunicipality   String?
  barangay           String?
  ownGcash           String?
  authorizedGcash    String?
  authorizedReceiver String?
  fbLink             String?
  imFilesLink        String?
  status             IMStatus? @default(ACTIVE)
  registeredBy       String?
  createdAt          DateTime? @default(now())
  updatedAt          DateTime? @updatedAt
  registeredByUser   User?     @relation(fields: [registeredBy], references: [id])

  @@index([imNumber])
  @@index([status])
  @@index([registeredBy])
  @@index([createdAt])
}

enum Office {
  PROJECT_DUO_GENERAL_ADMINISTRATION
  PROJECT_DUO_GENERAL_OPERATIONS
}

enum Group {
  ASG
  AFG
  SOG
  CG
}

enum Department {
  ASSETS_AND_PROPERTY_MANAGEMENT
  PEOPLE_MANAGEMENT
  ACCOUNTS_PAYABLE
  ACCOUNTS_RECEIVABLE
  TREASURY
  BUSINESS_UNIT_1
  BUSINESS_UNIT_2
  BUSINESS_DEVELOPMENT
  DESIGN_AND_MULTIMEDIA
  COPY_AND_DIGITAL
}

enum ModulePermission {
  REQUESTOR
  APPROVER
}

enum IMStatus {
  ACTIVE
  INACTIVE
}

model Project {
  id              String      @id @default(cuid())
  projectID       String      @unique
  projectName     String
  type            ProjectType
  projectDate     DateTime?
  projectVenue    String?
  accountManager  String
  projectManager  String
  artist          String?
  writer          String?
  others          String?
  companyName     String?
  department      String?
  proponent       String?
  brand                String?
  internalBudgetInitial Decimal?
  internalBudgetCurrent Decimal?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  accountManagerUser User     @relation("ProjectAccountManager", fields: [accountManager], references: [id])
  projectManagerUser User     @relation("ProjectManager", fields: [projectManager], references: [id])
  ces             CE[]
  imcfForms       IMCFForm[]

  @@index([accountManager])
  @@index([projectManager])
  @@index([type])
  @@index([createdAt])
}

model CE {
  id          String     @id @default(cuid())
  ceID        String     @unique
  projectID   String
  cepdNumber  String
  version     String     @default("V1")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  project     Project    @relation(fields: [projectID], references: [id], onDelete: Cascade)
  imcfForms   IMCFForm[]

  @@index([projectID])
  @@index([cepdNumber])
}

model IMCFForm {
  id                          String              @id @default(cuid())
  referenceNumber             String              @unique
  projectID                   String
  ceID                        String
  clearanceRequestor          String
  department                  String
  group                       String?
  dateOfRequest               DateTime            @default(now())
  targetReleaseDate           DateTime?
  coverageFromDate            DateTime?
  coverageToDate              DateTime?
  clearanceRequestorRemarks   String?
  clearanceReviewerRemarks    String?
  clearanceApproverRemarks    String?
  hrdRemarks                  String?
  status                      IMCFStatus          @default(DRAFT)
  createdAt                   DateTime            @default(now())
  updatedAt                   DateTime            @updatedAt
  project                     Project             @relation(fields: [projectID], references: [id])
  ce                          CE                  @relation(fields: [ceID], references: [id])
  requestor                   User                @relation(fields: [clearanceRequestor], references: [id])
  personnel                   IMCFPersonnel[]

  @@index([projectID])
  @@index([ceID])
  @@index([clearanceRequestor])
  @@index([status])
  @@index([dateOfRequest])
}

model IMCFPersonnel {
  id                String    @id @default(cuid())
  imcfFormID        String
  registeredName    String
  position          String
  outletVenue       String
  packagedFee       Decimal   @default(0)
  mondayFee         Decimal   @default(0)
  tuesdayFee        Decimal   @default(0)
  wednesdayFee      Decimal   @default(0)
  thursdayFee       Decimal   @default(0)
  fridayFee         Decimal   @default(0)
  saturdayFee       Decimal   @default(0)
  sundayFee         Decimal   @default(0)
  ownGcash          String?
  authGcash         String?
  authGcashAccName  String?
  remarks           String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  imcfForm          IMCFForm  @relation(fields: [imcfFormID], references: [id], onDelete: Cascade)

  @@index([imcfFormID])
  @@index([registeredName])
}

enum ProjectType {
  BTL_ACTIVATION
  SPECIAL_EVENT_PRODUCT
  MERCHANDISING
  MULTIMEDIA_PRODUCTION
  IN_TRADE_IN_STORE_EXPO_EXHIBITS_CONVENTIONS
  FABRICATION_SETUP
  OTHER_SERVICES
}

enum IMCFStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
}
