// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For email/password auth
  accounts      Account[]
  sessions      Session[]

  // Employee Vital Records - nullable initially for profile completion flow
  lastName         String?
  firstName        String?
  middleName       String?
  position         String?
  idNumber         String?        @unique
  employmentDate   DateTime?
  office           Office?
  group            Group?
  department       Department?
  contactNumber    String?
  pdEmail          String?        @unique // Main work email
  personalEmail    String?        @unique // Personal email
  birthdate        DateTime?
  addressId        String?
  address          Address?       @relation(fields: [addressId], references: [id])
  permissions      Permission[]

  // Profile completion status
  profileCompleted Boolean        @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Address {
  id             String  @id @default(cuid())
  houseNo        String
  street         String
  subdivision    String?
  region         String
  province       String? // Nullable if Region is NCR
  cityMunicipality String
  barangay       String
  users          User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Permission {
  id               String           @id @default(cuid())
  userId           String
  module           String
  modulePermission ModulePermission
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, module])
}

enum Office {
  PROJECT_DUO_GENERAL_ADMINISTRATION
  PROJECT_DUO_GENERAL_OPERATIONS
}

enum Group {
  ASG  // Administrative Support Group
  AFG  // Accounting Finance Group  
  SOG  // Sales and Operations Group
  CG   // Creatives Group
}

enum Department {
  // ASG Departments
  ASSETS_AND_PROPERTY_MANAGEMENT    // under ASG
  PEOPLE_MANAGEMENT                 // under ASG
  
  // AFG Departments  
  ACCOUNTS_PAYABLE                  // under AFG
  ACCOUNTS_RECEIVABLE               // under AFG
  TREASURY                          // under AFG
  
  // SOG Departments
  BUSINESS_UNIT_1                   // under SOG
  BUSINESS_UNIT_2                   // under SOG
  BUSINESS_DEVELOPMENT              // under SOG
  
  // CG Departments
  DESIGN_AND_MULTIMEDIA             // under CG
  COPY_AND_DIGITAL                  // under CG
}

enum ModulePermission {
  REQUESTOR
  APPROVER
}